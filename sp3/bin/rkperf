#!/usr/bin/env python3


import argparse
import json
import os
import pdb


def get_max_dim_size(problem_sizes):
    max_size = 0
    for p in problem_sizes:
        for o in p:
            if max_size < o:
                max_size = o
    return max_size


def do_perf(problem_sizes):
    max_dim_size = get_max_dim_size(problem_sizes)
    m, n, c, k, gflops, efficiency = [], [], [], [], [], []
    for p in problem_sizes:
        m_, n_, c_, k_, _* = p
        ps_cmd = "sed -i \'/.*problemSizes\[/,/}};/s/{.*}};/{" + ', '.join(str(o) for o in p) + "}};/g\' ../source/ClientParameters.h"
        ms_cmd = "sed -i \'s/\(.*maxSize. = \).*/\\1" + str(max_dim_size**2) + "/g\' ../source/ClientParameters.h"
        m.append(m_)
        n.append(n_)
        c.append(c_)
        k.append(k_)
        ret = os.system(ps_cmd)

        break
        print(ps_cmd)
        print(ms_cmd)
        break


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.description = "Replacement kernel perf tool"
    parser.add_argument("-f", "--config", type=str, help='specify config file path')
    parser.add_argument("-g", "--generate", type=str, help='generate generic config file')
    args = parser.parse_args()

    if args.generate:
        fname = "config.json"
        fpath = os.getcwd() + "/" + fname
        #data = '{\n\t"ProblemSize": "[ [960, 1024, 1, 1024, 996, 996, 1056, 1056], [1920, 2048, 1, 2048, 1952, 1952, 2080, 2080], [3840, 4096, 1, 4096, 3872, 3872, 4128, 4128], [7680, 8192, 1, 8192, 7712, 7712, 8224, 8224] ]"\n}\n'
        data = '{\n\t"ProblemSize": "[ [960, 1024, 1, 1024, 996, 996, 1056, 1056] ]"\n}\n'
        with open(fpath, "w") as fp:
            fp.write(data)
        print('config.json Generated in ' + os.getcwd())
        exit(0)

    if not args.config:
        print('No config file specified, please use "--help" for more details.')
        exit(-1)

    conf = json.load(open(args.config, 'r'))
    ps = eval(conf['ProblemSize'])
    do_perf(ps)

